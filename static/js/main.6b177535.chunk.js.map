{"version":3,"sources":["components/PopupForm.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["PopupForm","props","react_default","a","createElement","className","type","placeholder","value","date","name","id","cols","rows","maxLength","onChange","getValue","onClick","Calendar","state","currentMonth","Date","currentDay","selectedDate","description","onDateClick","day","_this","setState","nextMonth","dateFns","addMonths","prevMonth","subMonths","inputChangeHandler","event","target","_this2","this","format","reactjs_popup_es","trigger","href","title","position","closeOnDocumentClick","contentStyle","width","key","Math","random","src_components_PopupForm","style","display","marginLeft","days","startDate","startOfWeek","weekStartsOn","i","push","addDays","_this3","_this$state","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","formattedDate","_loop","cloneDay","concat","isSameMonth","isSameDay","isToday","renderHeader","renderDays","renderCells","Component","App","src_components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b177535.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PopupForm.css';\r\n\r\nconst PopupForm = props => (\r\n    <div className='popupForm'>\r\n        <input type=\"text\" className='popup_input inEvent' placeholder='Event' />\r\n        <input type=\"text\"className='popup_input inDate' placeholder='Day, month, year' value={props.date? props.date:null} />\r\n        <input type=\"text\" className='popup_input inNames' placeholder='Persons' />\r\n        <br/>\r\n        <span className='popup_description'> Description: </span>\r\n        <br/>\r\n        <textarea name=\"description\" value={props.value} id=\"event_description\" cols=\"34\" rows=\"5\" maxLength={150} onChange={props.getValue} > </textarea>\r\n        <br/><br/>\r\n        <div className='popup_btn'>\r\n            <button className=\"btn_done\" onClick={props.getValue}> Done </button>\r\n            <button className='btn_delete'> Delete </button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PopupForm;\r\n","import React, {Component} from 'react';\r\nimport dateFns from 'date-fns';\r\nimport './Calendar.css'\r\nimport Popup from 'reactjs-popup';\r\nimport PopupForm from './PopupForm'\r\n\r\nclass Calendar extends Component{\r\n\r\n    state = {\r\n        currentMonth: new Date(),\r\n        currentDay: new Date(),\r\n        selectedDate: new Date(),\r\n        value: '',\r\n        description: null,\r\n    };\r\n\r\n    renderHeader() {\r\n        const dateFormat = 'MMMM YYYY';\r\n\r\n        return (\r\n            <div className='header row'>\r\n                <div className='col col-start'>\r\n                    <b>{dateFns.format(this.state.currentDay, 'dddd, MMMM D, YYYY')}</b>\r\n                </div>\r\n                <div className='col col-center'>\r\n                    <div className='icon' onClick={this.prevMonth}>\r\n                        chevron_left\r\n                    </div>\r\n                    <span>\r\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\r\n                    </span>\r\n                    <div className='icon' onClick={this.nextMonth}>\r\n                        chevron_right\r\n                    </div>\r\n                </div>\r\n                <div className='col col-end'>\r\n                    <Popup\r\n                        trigger={<a className='btn add_event' href='#' title='Choose date'> Add event</a>}\r\n                        position='bottom center'\r\n                        closeOnDocumentClick\r\n                        contentStyle={{\r\n                            width: '300px',\r\n                        }}\r\n                        value={this.state.value}\r\n                        key={Math.random()}\r\n                    >\r\n                        <PopupForm\r\n                            getValue={(event) => this.inputChangeHandler(event)}\r\n                            value={this.state.value}\r\n                        />\r\n                    </Popup>\r\n                    <a className='btn update' href='#' title='Choose date'> Update</a>\r\n                    <div style={{display: 'inline-block'}}>\r\n                        <span className='icon' style={{marginLeft: '20px'}}> search </span>\r\n                        <input className='search' type=\"text\" placeholder='Event, date of person'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderDays() {\r\n        const dateFormat = 'dddd';\r\n        const days = [];\r\n\r\n        let startDate = dateFns.startOfWeek((this.state.currentMonth),{weekStartsOn: 1});\r\n        for (let i = 0; i < 7; i++) {\r\n            days.push(\r\n                <div className='col col-center' key={i}>\r\n                    {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return <div className='days row'>{days}</div>\r\n    }\r\n\r\n    renderCells() {\r\n        const { currentMonth, selectedDate} = this.state;\r\n        const monthStart = dateFns.startOfMonth(currentMonth);\r\n        const monthEnd = dateFns.endOfMonth(currentMonth);\r\n        const startDate = dateFns.startOfWeek((monthStart),{weekStartsOn: 1});\r\n        const endDate = dateFns.endOfWeek((monthEnd),{weekStartsOn: 1});\r\n\r\n        const dateFormat = 'D';\r\n        const rows = [];\r\n\r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = '';\r\n\r\n        while (day <= endDate) {\r\n            for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cloneDay = day;\r\n                days.push(\r\n                    <Popup\r\n                        trigger={\r\n                            <div\r\n                                className={`col cell\r\n                                    ${!dateFns.isSameMonth(day, monthStart)\r\n                                        ? 'disabled'\r\n                                        : dateFns.isSameDay(day, selectedDate) ? 'selected' : ''}\r\n                                    ${dateFns.isToday(day) ? 'today' : '' }`}\r\n                                key={day}\r\n                                onClick={ () => this.onDateClick(cloneDay)}\r\n                            >\r\n                                <span className='number'> {formattedDate} </span>\r\n                            </div>}\r\n                        position='bottom center'\r\n                        closeOnDocumentClick\r\n                        contentStyle={{\r\n                            width: '300px',\r\n                        }}\r\n                        key={day}\r\n                    >\r\n                        <PopupForm\r\n                            date={dateFns.format(day, 'DD MMMM YYYY')}\r\n                            getValue={(event) => this.inputChangeHandler(event)}\r\n                            value={this.state.value}\r\n                        />\r\n                    </Popup>\r\n                );\r\n                day = dateFns.addDays(day, 1)\r\n            }\r\n            rows.push(\r\n                <div className='row' key={day}>\r\n                    {days}\r\n                </div>\r\n            );\r\n            days = []\r\n        }\r\n\r\n        return <div className='body'> {rows} </div>;\r\n    }\r\n\r\n    onDateClick = day => {\r\n        this.setState({\r\n            selectedDate: day\r\n        });\r\n    };\r\n\r\n    nextMonth = () => {\r\n        this.setState({\r\n            currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n        })\r\n    };\r\n\r\n    prevMonth = () => {\r\n        this.setState({\r\n            currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n        })\r\n    };\r\n\r\n    inputChangeHandler = (event) => {\r\n        this.setState({\r\n            value: event.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='calendar'>\r\n                {this.renderHeader()}\r\n                {this.renderDays()}\r\n                {this.renderCells()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar","import React from 'react';\nimport './App.css';\nimport Calendar from './components/Calendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}