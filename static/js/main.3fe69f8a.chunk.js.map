{"version":3,"sources":["components/containers/Header/Header.js","components/containers/WeekDays/WeekDays.js","components/containers/PopupForm/PopupForm.js","components/containers/CalendarCells/CalendarCells.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","dateFns","format","currentDay","onClick","changeMonth","currentMonth","reactjs_popup_es","trigger","title","position","closeOnDocumentClick","contentStyle","width","textAlign","key","Math","random","children","style","display","marginLeft","type","placeholder","WeekDays","days","startDate","startOfWeek","weekStartsOn","i","push","addDays","PopupForm","value","event","onChange","changeEvent","readOnly","date","persons","changePersons","htmlFor","name","description","id","cols","rows","maxLength","changeValue","getEventValues","CalendarCells","selectedDate","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","day","formattedDate","_loop","cls","isSameMonth","isSameDay","cls_today","isToday","concat","renderEvents","events","containers_PopupForm_PopupForm","Calendar","state","Date","next","updateMonth","addMonths","subMonths","_this","setState","target","eventList","arr","length","_this2","this","containers_Header_Header","containers_WeekDays_WeekDays","containers_CalendarCells_CalendarCells","Component","App","src_components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fe69f8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport dateFns from 'date-fns';\r\nimport './Header.css'\r\nimport Popup from 'reactjs-popup';\r\n\r\n\r\nconst Header = props => {\r\n    const dateFormat = 'MMMM YYYY';\r\n\r\n    return (\r\n        <div className='header row'>\r\n            <div className='col col-start'>\r\n                <span>Today is: </span>\r\n                <b>{dateFns.format(props.currentDay, 'dddd, MMMM D, YYYY')}</b>\r\n            </div>\r\n            <div className='col col-center'>\r\n                <div className='icon' onClick={() => props.changeMonth(false)}>\r\n                    chevron_left\r\n                </div>\r\n                <span>\r\n                    {dateFns.format(props.currentMonth, dateFormat)}\r\n                </span>\r\n                <div className='icon' onClick={() => props.changeMonth(true)}>\r\n                    chevron_right\r\n                </div>\r\n            </div>\r\n            <div className='col col-end'>\r\n                <Popup\r\n                    trigger={<button className='btn add_event' title='Choose date'> Add event</button>}\r\n                    position={'bottom center'}\r\n                    closeOnDocumentClick\r\n                    contentStyle={{\r\n                        width: '300px',\r\n                        textAlign: 'center'\r\n                    }}\r\n                    key={Math.random()}\r\n                    children={'To add event, click the date on the calendar'}\r\n                />\r\n                <button className='btn update' title='Sorry it don`t works'> Update</button>\r\n                <div style={{display: 'inline-block'}}>\r\n                    <span className='icon' style={{marginLeft: '20px'}}> search </span>\r\n                    <input className='search' type=\"text\" placeholder='Event, date of person'/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport dateFns from 'date-fns';\r\nimport './WeekDays.css';\r\n\r\nconst WeekDays = props => {\r\n    const dateFormat = 'dddd';\r\n    const days = [];\r\n\r\n    let startDate = dateFns.startOfWeek((props.currentMonth),{weekStartsOn: 1});\r\n    for (let i = 0; i < 7; i++) {\r\n        days.push(\r\n            <div className='col col-center' key={i}>\r\n                {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n  return (\r\n      <div className='days row'>{days}</div>\r\n  )\r\n};\r\n\r\nexport default WeekDays;","import React from 'react';\r\nimport './PopupForm.css';\r\n\r\n\r\nconst PopupForm = props => (\r\n    <div className='popupForm'>\r\n        <input\r\n            type=\"text\"\r\n            className='popup_input inEvent'\r\n            placeholder='Event'\r\n            value={props.event}\r\n            onChange={props.changeEvent}\r\n        />\r\n        <input\r\n            type=\"text\"\r\n            className='popup_input inDate'\r\n            placeholder='Day, month, year'\r\n            readOnly={props.readOnly}\r\n            value={props.date ? props.date:null}\r\n        />\r\n        <input\r\n            type=\"text\"\r\n            className='popup_input inNames'\r\n            placeholder='Persons'\r\n            value={props.persons}\r\n            onChange={props.changePersons}\r\n        />\r\n        <br/>\r\n        <label htmlFor=\"event_description\"> Description\r\n            <textarea\r\n                name=\"description\"\r\n                value={props.description}\r\n                id=\"event_description\"\r\n                cols=\"34\" rows=\"5\"\r\n                maxLength={150}\r\n                onChange={props.changeValue}\r\n            />\r\n            <br/><br/>\r\n            <div className='popup_btn'>\r\n                <button className=\"btn_add\" onClick={props.getEventValues}\r\n                > Add </button>\r\n                <button className='btn_delete'> Delete </button>\r\n            </div>\r\n        </label>\r\n    </div>\r\n);\r\n\r\nexport default PopupForm;","import React from 'react';\r\nimport dateFns from 'date-fns';\r\nimport './CalendarCells.css'\r\nimport Popup from 'reactjs-popup';\r\nimport PopupForm from '../PopupForm/PopupForm'\r\n\r\nconst CalendarCells = props => {\r\n    const { currentMonth, selectedDate} = props;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(currentMonth);\r\n    const startDate = dateFns.startOfWeek((monthStart),{weekStartsOn: 1});\r\n    const endDate = dateFns.endOfWeek((monthEnd),{weekStartsOn: 1});\r\n\r\n    const dateFormat = 'D';\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = '';\r\n\r\n    while (day <= endDate) {\r\n        for (let i = 0; i < 7; i++) {\r\n                formattedDate = dateFns.format(day, dateFormat);\r\n                const cls = !dateFns.isSameMonth(day, monthStart)? 'disabled': dateFns.isSameDay(day, selectedDate)? 'selected' : '' ;\r\n                const cls_today = dateFns.isToday(day) ? 'today' : '';\r\n                const date = dateFns.format(day, 'DD MMMM YYYY') ;\r\n\r\n                days.push(\r\n                    <Popup\r\n                        trigger={\r\n                            <div className={`col cell ${cls} ${cls_today}`} key={day}>\r\n                                <span className='number'> {formattedDate} </span>\r\n                                {props.renderEvents(date, props.events)}\r\n                            </div>}\r\n                        position={'bottom center'}\r\n                        closeOnDocumentClick\r\n                        contentStyle={{\r\n                            width: '300px'\r\n                        }}\r\n                        key={day}\r\n                    >\r\n                        <PopupForm\r\n                            date={date}\r\n                            readOnly={true}\r\n                            changeValue={(event) => props.changeValue(event)}\r\n                            changeEvent={(event) => props.changeEvent(event)}\r\n                            changePersons={(event) => props.changePersons(event)}\r\n                            getEventValues={() => props.getEventValues(day, date)}\r\n                            event={props.event}\r\n                            persons={props.persons}\r\n                            description={props.description}\r\n                            events={props.events}\r\n                        />\r\n                    </Popup>\r\n                );\r\n\r\n                day = dateFns.addDays(day, 1)\r\n        }\r\n\r\n        rows.push(\r\n            <div className='row' key={day}>\r\n                {days}\r\n            </div>\r\n        );\r\n        days = []\r\n    }\r\n\r\n    return (\r\n        <div className='body'> {rows} </div>\r\n    )\r\n};\r\n\r\nexport default CalendarCells;","import React, {Component} from 'react';\r\nimport dateFns from 'date-fns';\r\nimport './Calendar.css'\r\nimport Header from \"./containers/Header/Header\";\r\nimport WeekDays from './containers/WeekDays/WeekDays';\r\nimport CalendarCells from './containers/CalendarCells/CalendarCells';\r\nimport eventList from '../eventList'\r\n\r\nclass Calendar extends Component{\r\n\r\n    state = {\r\n        currentMonth: new Date(),\r\n        currentDay: new Date(),\r\n        selectedDate: new Date(),\r\n        event: \"\",\r\n        persons: \"\",\r\n        description: \"\",\r\n    };\r\n\r\n\r\n    changeMonth = next => {\r\n        const updateMonth = next ? dateFns.addMonths : dateFns.subMonths;\r\n        this.setState({\r\n            currentMonth: updateMonth(this.state.currentMonth, 1)\r\n        })\r\n    };\r\n\r\n    changeValue = event => {\r\n        this.setState({\r\n            description: event.target.value,\r\n\r\n        });\r\n    };\r\n\r\n    changeEvent = event => {\r\n        this.setState({\r\n            event: event.target.value\r\n        })\r\n    };\r\n\r\n    changePersons = event => {\r\n      this.setState({\r\n          persons:event.target.value\r\n      })\r\n    };\r\n\r\n    getEventValues = (day, date) => {\r\n        this.setState({\r\n            selectedDate: day\r\n        });\r\n\r\n        eventList.events.push({\r\n            \"event\": this.state.event,\r\n            \"date\": date,\r\n            \"persons\": this.state.persons,\r\n            \"description\": this.state.description\r\n        });\r\n\r\n        // alert('Event: ' + this.state.event + ', with: ' + this.state.persons + ', added on: ' + date );\r\n        this.setState({\r\n            value: \"\",\r\n            event: \"\",\r\n            persons: \"\",\r\n            description: \"\"\r\n        })\r\n    };\r\n    \r\n    renderEvents = (date, arr) => {\r\n        for (let i = 0; i < arr.length; i++){\r\n            if (date === arr[i].date) {\r\n                return <div\r\n                    className='events'\r\n                >\r\n                    <br/>\r\n                    Event: <span className='bold'> {arr[i].event} </span>\r\n                    <br/>\r\n                    Persons: <span className='bold'>{arr[i].persons}</span>\r\n                    <br/>\r\n                    <span> {arr[i].description} </span>\r\n                </div>\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='calendar'>\r\n                <Header\r\n                    currentDay={this.state.currentDay}\r\n                    currentMonth={this.state.currentMonth}\r\n                    changeMonth={(next) => this.changeMonth(next)}\r\n                />\r\n                <WeekDays\r\n                    currentMonth={this.state.currentMonth}\r\n                />\r\n                <CalendarCells\r\n                    currentMonth={this.state.currentMonth}\r\n                    selectedDate={this.state.selectedDate}\r\n                    changeValue={this.changeValue}\r\n                    changeEvent={this.changeEvent}\r\n                    changePersons={this.changePersons}\r\n                    getEventValues={this.getEventValues}\r\n                    event={this.state.event}\r\n                    persons={this.state.persons}\r\n                    description={this.state.description}\r\n                    events={eventList.events}\r\n                    renderEvents={this.renderEvents}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar","import React from 'react';\nimport './App.css';\nimport Calendar from './components/Calendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}